import React, { Component } from "react";
import * as faqServices from "../../services/faqServices";
import PropTypes from "prop-types";
import { Form, FormGroup, Label, Button } from "reactstrap";
import { Formik, Field } from "formik";
import { toast } from "react-toastify";
import categoryValidationSchema from "./categoryValidationSchema";

class AddCatForm extends Component {
  constructor(props) {
    super(props);
    this.state = {
      formData: {
        id: 0,
        name: ""
      },
      isEditing: false
    };
  }

  componentDidMount() {
    const { id } = this.props.match.params;
    if (id) {
      let formData = this.props.location.state;
      if (formData) {
        this.setFormData(formData);
      }
    }
  }
  setFormData = data => {
    let formData = {
      id: data.id,
      name: data.name
    };
    this.setState(prevState => {
      return {
        ...prevState,
        formData,
        isEditing: true
      };
    });
  };

  handleSubmit = values => {
    this.state.isEditing
      ? faqServices
          .editCategory(values)
          .then(this.onAddCatSuccsess)
          .catch(this.onEditCatsError)
      : faqServices
          .addCategory(values)
          .then(this.onAddCatSuccsess)
          .catch(this.onAddCatError);
  };

  onAddCatSuccsess = () => {
    this.props.history.push("/admin/faqCats/");
  };

  onAddCatError = error => {
    toast.error(error.message);
  };

  onEditCatsError = error => {
    toast.error(error.message);
  };

  goBackToCats = () => {
    this.props.history.push("/admin/faqCats");
  };

  render() {
    return (
      <React.Fragment>
        <Formik
          enableReinitialize={true}
          validationSchema={categoryValidationSchema}
          initialValues={this.state.formData}
          isInitialValid={this.state.isEditing}
          onSubmit={this.handleSubmit}
        >
          {props => {
            const {
              values,
              touched,
              errors,
              handleSubmit,
              isValid,
              isSubmitting
            } = props;
            return (
              <div className="card-body">
                <div className="card p-4 ">
                  <Form onSubmit={handleSubmit} className={"col-md-6 pt-4"}>
                    <FormGroup>
                      <Label>
                        <p className="EditCreate">
                          {this.state.isEditing
                            ? "Edit Category"
                            : "Create new Category"}
                        </p>
                      </Label>
                      <Field
                        name="name"
                        type="text"
                        values={values.name}
                        placeholder="Category name"
                        className={
                          errors.name && touched.name
                            ? "form-control"
                            : "form-control"
                        }
                      />
                      {errors.name && touched.name && (
                        <span className="input-feedback">{errors.name}</span>
                      )}
                    </FormGroup>
                    <Button type="submit" disabled={!isValid || isSubmitting}>
                      {this.state.isEditing ? "Edit" : "Create"}
                    </Button>
                    <Button
                      type="button"
                      className="float-right"
                      color=" #c22b38"
                      onClick={this.goBackToCats}
                    >
                      Cancel
                    </Button>
                  </Form>
                </div>
              </div>
            );
          }}
        </Formik>
      </React.Fragment>
    );
  }
}
AddCatForm.propTypes = {
  match: PropTypes.shape({
    params: PropTypes.shape({
      id: PropTypes.string
    })
  }),
  location: PropTypes.shape({
    state: PropTypes.shape({
      id: PropTypes.number.isRequired,
      name: PropTypes.string.isRequired
    })
  }),
  history: PropTypes.shape({ push: PropTypes.func })
};

export default AddCatForm;
